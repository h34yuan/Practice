# dp keep track of max/ min, dp is length of input array, min/max so far at cur position,
646. Maximum Length of Pair Chain
120. Triangle
740. Delete and Earn
1043. Partition Array for Maximum Sum

## kadane algorithm
918. Maximum Sum Circular Subarray
53. Maximum Subarray

## dp knapsack, iterate i buckets of possible vals and iterate possible values and update from previous dp
322. Coin Change
518. Coin Change 2
416. Partition Equal Subset Sum
983. Minimum Cost For Tickets

## dp minimax, keep track of left and right bound indices i, j
486. Predict the Winner
877. Stone Game

## dp 2d keep track of max/min between i, j. iterate from smallest interval to larger for iteration of size d, index i, j = i+d
1039. Minimum Score Triangulation of Polygon
312. Burst Balloons

## dp 2d between index i j
516. Longest Palindromic Subsequence
583. Delete Operation for Two Strings
712. Minimum ASCII Delete Sum for Two Strings
718. Maximum Length of Repeated Subarray
787. Cheapest Flights Within K Stops
1143. Longest Common Subsequence
1035. Uncrossed Lines

### dp matrix 2d. dp[i][j] corresponds to position of input matrix. iterate all positions and use previously seen positions. dp keeps track of min/max count so far
62. Unique Paths
63. Unique Paths II
64. Minimum Path Sum
85. Maximal Rectangle
221. Maximal Square
304. Range Sum Query 2D - Immutable
1277. Count Square Submatrices with All Ones
1314. Matrix Block Sum
931. Minimum Falling Path Sum


# dp keeps track of indices (last seen or first). dp is size of length of input
300. Longest Increasing Subsequence

# dp keep track of tot possible count or product. dp is len of tot possible vals or input (e.g. 0-target, possible alphabet). return last dp val. bottom up keep track of count from 0 to i. dp[i] updates with previous dp
91. Decode Ways
96. Unique Binary Search Trees
377. Combination Sum IV
650. 2 Keys Keyboard
673. Number of Longest Increasing Subsequence
674. Longest Continuous Increasing Subsequence
1109. Corporate Flight Bookings
746. Min Cost Climbing Stairs

## dp keep track of 2 dp. dp one is updated from second dp. or both dps depend on each other
688. Knight Probability in Chessboard
801. Minimum Swaps To Make Sequences Increasing
123. Best Time to Buy and Sell Stock III
494. Target Sum
1155. Number of Dice Rolls With Target Sum
1186. Maximum Subarray Sum with One Deletion
1567. Maximum Length of Subarray With Positive Product

## dp dict to store seen values/index and count
873. Length of Longest Fibonacci Subsequence
1027. Longest Arithmetic Subsequence
368. Largest Divisible Subset
467. Unique Substrings in Wraparound String

# dp dfs memo. dp stores all previously seen combos or vals
140. Word Break II
698. Partition to K Equal Sum Subsets
241. Different Ways to Add Parentheses

# dp keeps boolean or signs. dp is size of input or possible values.
139. Word Break
978. Longest Turbulent Subarray
647. Palindromic Substrings
204. Count Primes


# constant dp, only need to keep track of n number of values
70. Climbing Stairs
121. Best Time to Buy and Sell Stock
122. Best Time to Buy and Sell Stock II
123. Best Time to Buy and Sell Stock III
198. House Robber
264. Ugly Number II
309. Best Time to Buy and Sell Stock with Cooldown
343. Integer Break
357. Count Numbers with Unique Digits
714. Best Time to Buy and Sell Stock with Transaction Fee
1262. Greatest Sum Divisible by Three
940. Distinct Subsequences II


## constant dp multi pass (start from left and right or start from different indices)
152. Maximum Product Subarray
213. House Robber II

# other
413. Arithmetic Slices
